AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Application Configuration
        Parameters:
          - OperatorEmail
          - BucketName
      - Label:
          default: Slack Configuration
        Parameters:
          - IncomingWebHookURL
          - SlackChannel
    ParameterLabels:
      IncomingWebHookURL:
        default: Slack Incoming Web Hook URL
      SlackChannel:
        default: Slack channel to send findings to
      OperatorEmail:
        default: Support staff email to send new logs to
      BucketName:
        default: S3 Bucket name to send audit logs

Parameters:
  OperatorEmail:
    Default: support@trivialsec.com
    Description: Email address to notify when new logs are published.
    Type: String
  BucketName:
    Default: audit
    Type: String
  IncomingWebHookURL:
    Default: 'https://hooks.slack.com/services/XXXXXX/YYYYY/REPLACE_WITH_YOURS'
    Description: Your unique Incoming Web Hook URL from slack service
    Type: String
  SlackChannel:
    Default: '#aws '
    Description: The slack channel to send findings to
    Type: String

Resources:
  S3Bucket: 
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Sub
        - '${BucketName}-${AWS::AccountId}'
        - BucketName: !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Status: Enabled
            ExpirationInDays: 1095
            NoncurrentVersionExpirationInDays: 90
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  BucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: S3Bucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal: 
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !Sub
              - arn:aws:s3:::${S3Bucket}
              - S3Bucket: !Ref S3Bucket
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub
              - arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
              - S3Bucket: !Ref S3Bucket
            Condition: 
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  Topic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: 
            Ref: OperatorEmail
          Protocol: email
  TopicPolicy: 
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
        - Ref: Topic
      PolicyDocument: 
        Version: "2008-10-17"
        Statement: 
          - Sid: AWSCloudTrailSNSPolicy
            Effect: Allow
            Principal: 
              Service: cloudtrail.amazonaws.com
            Resource: "*"
            Action: SNS:Publish
  Trail:
    DependsOn: 
      - BucketPolicy
      - TopicPolicy
    Type: AWS::CloudTrail::Trail
    Properties: 
      S3BucketName: 
        Ref: S3Bucket
      SnsTopicName: 
        Fn::GetAtt: 
          - Topic
          - TopicName
      IsLogging: true
      IsMultiRegionTrail: true
      IncludeGlobalServiceEvents: true
  SecHub:
    Type: 'AWS::SecurityHub::Hub'
    Properties: {}
  SecurityHubToSlackRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies: []
  SecurityHubFindingsToSlack:
    DependsOn: lambdafindingsToSlack
    Type: 'AWS::Events::Rule'
    Properties:
      Name: SecurityHubFindingsToSlack
      Description: 'CloudWatchEvents Rule to enable SecurityHub Findings in Slack '
      State: ENABLED
      EventPattern:
        source:
          - aws.securityhub
        resources:
          - 'Fn::Join':
              - ':'
              - - arn
                - aws
                - securityhub
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'Fn::Join':
                    - /
                    - - action
                      - custom
                      - SendToSlack
      Targets:
        - Arn:
            'Fn::GetAtt':
              - lambdafindingsToSlack
              - Arn
          Id: SecurityHubToSlackFunction
  LambdaInvokePermission:
    DependsOn:
      - lambdafindingsToSlack
      - SecurityHubFindingsToSlack
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      FunctionName:
        'Fn::GetAtt':
          - lambdafindingsToSlack
          - Arn
      SourceArn:
        'Fn::GetAtt':
          - SecurityHubFindingsToSlack
          - Arn
  lambdafindingsToSlack:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - SecurityHubToSlackRole
          - Arn
      Code:
        ZipFile:
          'Fn::Join':
            - ''
            - - |
                'use strict';
              - |
                const AWS = require('aws-sdk');
              - |
                const url = require('url');
              - |
                const https = require('https');
              - |+

              - |
                const webHookUrl = process.env['webHookUrl'];
              - |
                const slackChannel = process.env.slackChannel;
              - |+

              - |
                function postMessage(message, callback) {
              - |
                const body = JSON.stringify(message);
              - |
                const options = url.parse(webHookUrl);
              - |
                options.method = 'POST';
              - |
                options.headers = {
              - |
                'Content-Type': 'application/json',
              - |
                'Content-Length': Buffer.byteLength(body),
              - |
                };
              - |+

              - |
                const postReq = https.request(options, (res) => {
              - |
                const chunks = [];
              - |
                res.setEncoding('utf8');
              - |
                res.on('data', (chunk) => chunks.push(chunk));
              - |
                res.on('end', () => {
              - |
                if (callback) {
              - |
                callback({
              - |
                body: chunks.join(''),
              - |
                statusCode: res.statusCode,
              - |
                statusMessage: res.statusMessage,
              - |
                });
              - |
                }
              - |
                });
              - |
                return res;
              - |
                });
              - |+

              - |
                postReq.write(body);
              - |
                postReq.end();
              - |
                }
              - |+

              - |
                function processEvent(event, callback) {
              - |
                const message = event;
              - |
                const consoleUrl = `https://console.aws.amazon.com/securityhub`;
              - |
                const finding = message.detail.findings[0].Types[0];
              - >
                const findingDescription =
                message.detail.findings[0].Description;
              - |
                const findingTime = message.detail.findings[0].UpdatedAt;
              - >
                const findingTimeEpoch = Math.floor(new Date(findingTime) /
                1000);
              - |
                const account =  message.detail.findings[0].AwsAccountId;
              - |
                const region =  message.detail.findings[0].Resources[0].Region;
              - |
                const type = message.detail.findings[0].Resources[0].Type;
              - |
                const messageId = message.detail.findings[0].Resources[0].Id;
              - >
                const lastSeen = `<!date^${findingTimeEpoch}^{date} at {time} |
                ${findingTime}>`;
              - |
                var color = '#7CD197';
              - |
                var severity = '';
              - |+

              - >
                if (1 <= message.detail.findings[0].Severity.Normalized &&
                message.detail.findings[0].Severity.Normalized <= 39) {severity
                = 'LOW'; color ='#879596';}
              - >
                else if (40 <= message.detail.findings[0].Severity.Normalized &&
                message.detail.findings[0].Severity.Normalized <= 69) {severity
                = 'MEDIUM'; color = '#ed7211';}
              - >
                else if (70 <= message.detail.findings[0].Severity.Normalized &&
                message.detail.findings[0].Severity.Normalized <= 89) {severity
                = 'HIGH'; color = '#ed7211';}
              - >
                else if (90 <= message.detail.findings[0].Severity.Normalized &&
                message.detail.findings[0].Severity.Normalized <= 100) {severity
                = 'CRITICAL'; color = '#ff0209';}
              - |
                else {severity = 'INFORMATIONAL'; color = '#007cbc';}
              - |+

              - |
                const attachment = [{
              - >
                "fallback": finding + ` - ${consoleUrl}/home?region=` +
                `${region}#/findings?search=id%3D${messageId}`,
              - >
                "pretext": `*AWS SecurityHub finding in ${region} for Acct:
                ${account}*`,
              - |
                "title": `${finding}`,
              - |
                "title_link": `${consoleUrl}/home?region=${region}#/research`,
              - |+

              - |
                "text": `${findingDescription}`,
              - |
                "fields": [
              - |
                {"title": "Severity","value": `${severity}`, "short": true},
              - |
                {"title": "Region","value": `${region}`,"short": true},
              - |
                {"title": "Resource Type","value": `${type}`,"short": true},
              - |
                {"title": "Last Seen","value": `${lastSeen}`, "short": true}
              - |
                ],
              - |
                "mrkdwn_in": ["pretext"],
              - |
                "color": color
              - |
                }];
              - |+

              - |
                const slackMessage = {
              - |
                channel: slackChannel,
              - |
                text : '',
              - |
                attachments : attachment,
              - |
                username: 'SecurityHub',
              - |
                'mrkdwn': true,
              - >
                icon_url:
                'https://raw.githubusercontent.com/aws-samples/amazon-securityhub-to-slack/master/images/gd_logo.png'
              - |
                };
              - |+

              - |
                postMessage(slackMessage, (response) => {
              - |
                if (response.statusCode < 400) {
              - |
                console.info('Message posted successfully');
              - |
                callback(null);
              - |
                } else if (response.statusCode < 500) {
              - >
                console.error(`Error posting message to Slack API:
                ${response.statusCode} - ${response.statusMessage}`);
              - |
                callback(null);
              - |
                } else {
              - >
                callback(`Server error when processing message:
                ${response.statusCode} - ${response.statusMessage}`);
              - |
                }
              - |
                });
              - |
                }
              - |
                exports.handler = (event, context, callback) => {
              - |2
                        processEvent(event, callback);
              - |
                };
      Environment:
        Variables:
          slackChannel:
            Ref: SlackChannel
          webHookUrl:
            Ref: IncomingWebHookURL
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 10
      Description: Lambda to push SecurityHub findings to Slack
      TracingConfig:
        Mode: Active

Outputs:
  BucketName:
    Value: !Ref 'S3Bucket'
  HubArn:
    Value: !Ref SecHub